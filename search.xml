<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hexo使用总结(1)]]></title>
      <url>/2017/04/28/Hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93(1)/</url>
      <content type="html"><![CDATA[<p>一、安装hexo</p>
<p>1.安装</p>
<pre><code>$ npm install hexo-cli -g  制定一个目录  默认会安装在执行命令的对应的文件夹

$ hexo init blog

$ cd blog

$ npm install
</code></pre><a id="more"></a>
<p>2.Demo生成以及预览</p>
<p>执行命令hexo generate生产静态页面。 执行命令hexo server启动本地预览服务。</p>
<p>然后在浏览器中访问<a href="http://localhost:4000/,此时，已经看到了一个漂亮的博客。" target="_blank" rel="external">http://localhost:4000/,此时，已经看到了一个漂亮的博客。</a></p>
<p>二、站点配置文件说明与修改</p>
<p>站点配置文件是 your-hexo-site 目录下的 _config.yml 文件，配置文件中基本都有配置项的说明或者参考官方配置说明。以下说几个常用的配置：</p>
<p>基本配置</p>
<pre><code>title: Hexo          #博客的标题

description:  Hexo使用总结     #简介

author: matt    #作者

language: zh-Hans      #语言，该设置使用的是next主题的简体中文

timezone: Asia/Shanghai #时区配置
</code></pre><p>URL显示以及主题配置</p>
<pre><code>permalink: posts/:year/:month/:day/:title.html

theme: next
</code></pre><p>打赏配置</p>
<p>reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</p>
<pre><code>wechatpay: /images/wechatpay.jpg

alipay: /images/alipay.jpg
</code></pre><p>图片必须加后缀名，类型一定要对  也可以用七牛存储相关图片</p>
<p>所有的配置，冒号：后面都必须有空格。有几个需要特殊说明的项目：</p>
<p>permalink：默认的文章链接是以：<a href="http://localhost/2016/11/29/you-title/的格式，个人喜欢在末尾加.html有动态页面的感觉，于是就修改为以上配置。" target="_blank" rel="external">http://localhost/2016/11/29/you-title/的格式，个人喜欢在末尾加.html有动态页面的感觉，于是就修改为以上配置。</a> 默认情况下配置文件中没有打赏配置，改内容是手动添加的。</p>
<p>三、主题选择及下载</p>
<p>在官方网站有很多主题预览，选择自己喜欢的进行下载。我选择的是NexT主题，根据官方的开始使用和主题配置进行配置主题。</p>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</p>
<pre><code>$ cd your-hexo-site

$ git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><p>启用主题需要在站点配置文件中修改默认配置theme: landscape =&gt; theme: next。其他配置请根据NexT的主题设定进行配置。</p>
<p>四、添加分类和标签</p>
<p>1.添加分类</p>
<pre><code>$ hexo new page categories
</code></pre><p>确认站点配置文件里有category_dir: categories 确认主题配置文件里有categories: /categories 编辑站点的source/categories/index.md，添加: *</p>
<pre><code>title: categories

date: 2016-11-29 11:49:50

type: &quot;categories&quot;

comments: false
</code></pre><p>2.添加标签</p>
<pre><code>$ hexo new page tags
</code></pre><p>确认站点配置文件里有tag_dir: tags 确认主题配置文件里有tags: /tags *</p>
<pre><code>title: tags

date: 2016-11-29 11:49:50

type: &quot;tags&quot;

comments: false
</code></pre><p>之后需要在主题中开启对应的配置选项。</p>
<p>五、文章写作</p>
<p>在 your-hexo-site 目录下执行下系列语句，生成一个名为 title 的空文章。</p>
<pre><code>$ hexo new &quot;title&quot;
</code></pre><p>可以看到提示生成了一个title.md，博客内容是用markdown语法写的。可以使用编辑器的插件，也可以在线编辑，还有专门的编辑器。我的mac使用的是 Mou。</p>
<p>每篇文章都有标头，格式如下：</p>
<pre><code>title: postName          #文章页面上的显示名称，可以任意修改，不会出现在URL中

date: 2016-11-29 15:30:16 #文章生成时间，一般不改，当然也可以任意修改

categories:              #文章分类目录，可以为空，注意:后面有个空格

tags:                    #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意 &quot;:&quot; 后面有个空格
</code></pre><p>—这里开始使用markdown格式输入你的正文。</p>
<p>添加分类与标签的另一种形式：</p>
<pre><code>tags:

- tag1

- tag2

categories: xxx
</code></pre><p>文章摘要，在需要显示摘要的地方添加如下代码：</p>
<p>以上是摘要</p>
<pre><code>&lt;!-- more --&gt;
</code></pre><p>以下是全文</p>
<p>more以上的内容既是文章的摘要，在主页显示，more以下的内容点击 “阅读全文” 连接打开。</p>
<p>六、添加站内搜索</p>
<p>添加站内搜索可以参考插件主页和插件说明，根据说明进行安装：</p>
<pre><code>$ npm install hexo-generator-search --save
</code></pre><p>配置,到主题的根目录打开 _config.yml 文件添加一下内容：</p>
<pre><code>search:

path: /search.xml

field: all
</code></pre><p>教程要求在站点配置文件中填入，但是填写后就会报错，所以不确定是否应该在主题根目录下配置。</p>
<p>七、最后</p>
<p>网络上有很多部署到git的教程，自行参考。执行命令hexo generate后会在目录下生产public文件夹，该文件夹是hexo生产的静态文件。可以部署发布到自己建的web服务器。以下列一些常用命令：</p>
<pre><code>hexo new &quot;postName&quot;      #新建文章

hexo new page &quot;pageName&quot; #新建页面

hexo generate            #生成静态页面至public目录

hexo server              #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）

hexo deploy              #将.deploy目录部署到GitHub

hexo help                #查看帮助

hexo version            #查看Hexo的版本
</code></pre><p>以下是命令的简写：</p>
<pre><code>hexo n == hexo new

hexo g == hexo generate

hexo s == hexo server

hexo d == hexo deploy
</code></pre><p>生成，部署也可以这样写：</p>
<pre><code>hexo d -g
</code></pre>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
            <category> next </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 自定义View onMeasure 的理解]]></title>
      <url>/2017/04/28/Android%20%E8%87%AA%E5%AE%9A%E4%B9%89View%20onMeasure%20%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="Android-自定义View-onMeasure-的理解"><a href="#Android-自定义View-onMeasure-的理解" class="headerlink" title="Android 自定义View onMeasure 的理解"></a>Android 自定义View onMeasure 的理解</h2><p>Android开发中如果有限的控件满足不了需求，可能会用到自定义View，一般情况下，自定义View都需要继承View类的onMeasure方法，onMeasure方法是用来计算View的大小的，下面我们就具体探究这些问题。</p>
<a id="more"></a>
<h3 id="首先，我们写一个自定义View，直接调用系统默认的onMeasure函数，看看会是怎样的现象："><a href="#首先，我们写一个自定义View，直接调用系统默认的onMeasure函数，看看会是怎样的现象：" class="headerlink" title="首先，我们写一个自定义View，直接调用系统默认的onMeasure函数，看看会是怎样的现象："></a>首先，我们写一个自定义View，直接调用系统默认的onMeasure函数，看看会是怎样的现象：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.addapp.customview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;        </div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong>父控件使用match_parent，CustomView使用match_parent</strong></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">cn.addapp.customview.CustomView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@android:color/black"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里加了10dp的margin并且把View的背景设置为了黑色，是为了方便辨别我们的CustomView，效果如下：</p>
<p><img src="http://s3.51cto.com/wyfs02/M00/45/DE/wKioL1Pso77ROkIvAAAxTKcLymg465.jpg" alt="magin 10dp"></p>
<p>我们可以看到，默认情况下，如果父控件和CustomView都使用match_parent，则CustomView会充满父控件。</p>
</li>
<li><p><strong>父控件使用match_parent，CustomView使用wrap_content</strong></p>
<p>把layout文件中，CustomView的layout_width/layout_height替换为wrap_content，你会发现，结果依然是充满父控件。</p>
</li>
<li><p><strong>父控件使用match_parent，CustomView使用固定的值</strong></p>
<p>把layout文件中，CustomView的layout_width/layout_height替换为50dp，你会发现，CustomView的显示结果为50dpx50dp，如图所示：</p>
<p><img src="http://s3.51cto.com/wyfs02/M00/45/DC/wKiom1PsoqaShr74AAA8MgI5FPY164.jpg" alt=""></p>
</li>
<li><p><strong>父控件使用固定的值，CustomView使用match_parent或者wrap_content</strong></p>
<p>那么，如果把父控件的layout_width/layout_height替换为50dp，CustomView设置为match_parent或者wrap_content，你会发现，CustomView的显示结果也是为50dpx50 dp。</p>
</li>
<li><p><strong>结论</strong></p>
<p>如果自定义的CustomView采用默认的onMeasure函数，行为如下：</p>
<p>（1） CustomView设置为 match_parent 或者 wrap_content 没有任何区别，其显示大小由父控件决定，它会填充满整个父控件的空间。</p>
<p>（2） CustomView设置为固定的值，则其显示大小为该设定的值。</p>
<p>如果你的自定义控件的大小计算就是跟系统默认的行为一致的话，那么你就不需要重写onMeasure函数了。</p>
</li>
<li><p><strong>编写onMeasure函数</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.addapp.customview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_VIEW_WIDTH = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_VIEW_HEIGHT = <span class="number">100</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> widthSize  = measureSize(DEFAULT_VIEW_WIDTH, widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightSize = measureSize(DEFAULT_VIEW_HEIGHT, heightMeasureSpec);</div><div class="line"></div><div class="line">        setMeasuredDimension(widthSize, heightSize);                </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">measureSize</span><span class="params">( <span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec )</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> result = defaultSize;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        <span class="comment">//1. layout给出了确定的值，比如：100dp</span></div><div class="line">        <span class="comment">//2. layout使用的是match_parent，但父控件的size已经可以确定了，比如设置的是具体的值或者			match_parent</span></div><div class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;      </div><div class="line">            result = specSize; <span class="comment">//建议：result直接使用确定值</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;   </div><div class="line">            <span class="comment">//UNSPECIFIED,没有任何限制，所以可以设置任何大小</span></div><div class="line">            result = defaultSize; <span class="comment">//期望当前自定义控件自行决定大小</span></div><div class="line">            <span class="comment">//1. layout使用的是wrap_content</span></div><div class="line">            <span class="comment">//2. layout使用的是match_parent,但父控件使用的是确定的值或者wrap_content</span></div><div class="line">           <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST)&#123;</div><div class="line">             result = Math.min(defaultSize, specSize); <span class="comment">//建议：result不能大于specSize</span></div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体看规则图1和图2：</p>
<p><img src="http://77g5pl.com1.z0.glb.clouddn.com/imgQQ20151005-0@2x.png" alt="规则图1"></p>
<p><img src="http://img.blog.csdn.net/20150413170503566" alt="规则图2"></p>
<p>​</p>
<p>这样重载了onMeasure函数之后，你会发现，当CustomView使用match_parent的时候，它会占满整个父控件，而当CustomView使用wrap_content的时候，它的大小则是代码中定义的默认大小100x100像素。当然，你也可以根据自己的需求改写measureDimension()的实现。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多种模式的android选择器类库]]></title>
      <url>/2017/04/26/%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%BC%8F%E7%9A%84android%E9%80%89%E6%8B%A9%E5%99%A8%E7%B1%BB%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><a href="https://github.com/addappcn/android-pickers" target="_blank" rel="external"><img src="https://img.shields.io/badge/API-14%2B-green.svg" alt="API 14+"></a></p>
<p>安卓选择器类库，包括日期及时间选择器（可设置范围）、单项选择器（可用于性别、职业、学历、星座等）、城市地址选择器（分省级、地级及县级）、数字选择器（可用于年龄、身高、体重、温度等）等……<br>还可以切换不同的模式（目前有普通模式，3d滚轮模式），<br>欢迎大伙儿在<a href="https://github.com/addappcn/android-pickers/issues" target="_blank" rel="external">Issues</a>提交你的意见或建议。<br>欢迎Fork &amp; Pull requests贡献您的代码，大家共同学习【android-pickers交流群 : 456738690】。<br><a id="more"></a></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/addappcn/android-pickers" target="_blank" rel="external">github</a></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://github.com/addappcn/android-pickers/blob/master/app/app-release.apk" target="_blank" rel="external">demo下载</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>“app”是Sample；“android-pickers”是library 包括WheelPicker、SinglePicker、DatePicker、TimePicker、LinkagePicker、AddressPicker、NumberPicker、CarNumberPicker等。</p>
<h3 id="远程加载JitPack包"><a href="#远程加载JitPack包" class="headerlink" title="远程加载JitPack包"></a>远程加载JitPack包</h3><p>加载jitpack仓库：<br><a href="https://jitpack.io/#addappcn/android-pickers" target="_blank" rel="external"><img src="https://jitpack.io/v/addappcn/android-pickers.svg" alt=""></a></p>
<p>第一步，在项目根目录下的build.gradle里加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123;</div><div class="line">        url &quot;https://www.jitpack.io&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步，在项目的app模块下的build.gradle里加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.addappcn:android-pickers:1.0.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h3><p>由于地址选择器使用了<a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">fastjson</a>来解析，混淆时候需要加入以下类似的规则，不混淆Province、City等实体类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-keepattributes InnerClasses,Signature</div><div class="line">-keepattributes *Annotation*</div><div class="line"></div><div class="line">-keep class cn.addapp.pickers.entity.** &#123; *;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Sample-（更多用法详见示例项目）"><a href="#Sample-（更多用法详见示例项目）" class="headerlink" title="Sample （更多用法详见示例项目）"></a>Sample （更多用法详见示例项目）</h3><h4 id="自定义扩展选择器："><a href="#自定义扩展选择器：" class="headerlink" title="自定义扩展选择器："></a>自定义扩展选择器：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CustomPicker picker = <span class="keyword">new</span> CustomPicker(<span class="keyword">this</span>);</div><div class="line">        picker.setOffset(<span class="number">1</span>);<span class="comment">//显示的条目的偏移量，条数为（offset*2+1）</span></div><div class="line">        picker.setGravity(Gravity.CENTER);<span class="comment">//居中</span></div><div class="line">        picker.setOnItemPickListener(<span class="keyword">new</span> OnItemPickListener&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemPicked</span><span class="params">(<span class="keyword">int</span> position, String option)</span> </span>&#123;</div><div class="line">                showToast(<span class="string">"index="</span> + position + <span class="string">", item="</span> + option);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        picker.show();</div></pre></td></tr></table></figure>
<h4 id="内嵌视图选择器："><a href="#内嵌视图选择器：" class="headerlink" title="内嵌视图选择器："></a>内嵌视图选择器：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TextView textView = findView(R.id.wheelview_tips);</div><div class="line">        WheelListView wheelListView = findView(R.id.wheelview_single);</div><div class="line">        wheelListView.setItems(<span class="keyword">new</span> String[]&#123;<span class="string">"少数民族"</span>, <span class="string">"贵州穿青人"</span>, <span class="string">"不在56个少数民族之列"</span>, <span class="string">"第57个民族"</span>&#125;, <span class="number">1</span>);</div><div class="line">        wheelListView.setSelectedTextColor(<span class="number">0xFFFF00FF</span>);</div><div class="line">        LineConfig config = <span class="keyword">new</span> LineConfig();</div><div class="line">        config.setColor(Color.parseColor(<span class="string">"#26A1B0"</span>));<span class="comment">//线颜色</span></div><div class="line">        config.setAlpha(<span class="number">100</span>);<span class="comment">//线透明度</span></div><div class="line">        config.setRatio((<span class="keyword">float</span>) (<span class="number">1.0</span> / <span class="number">5.0</span>));<span class="comment">//线比率</span></div><div class="line">        config.setThick(ConvertUtils.toPx(<span class="keyword">this</span>, <span class="number">3</span>));<span class="comment">//线粗</span></div><div class="line">        config.setShadowVisible(<span class="keyword">false</span>);</div><div class="line">        wheelListView.setLineConfig(config);</div><div class="line">        wheelListView.setOnWheelChangeListener(<span class="keyword">new</span> WheelListView.OnWheelChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">boolean</span> isUserScroll, <span class="keyword">int</span> index, String item)</span> </span>&#123;</div><div class="line">                textView.setText(<span class="string">"index="</span> + index + <span class="string">",item="</span> + item);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        picker = <span class="keyword">new</span> CarNumberPicker(<span class="keyword">this</span>);</div><div class="line">        picker.setWeightEnable(<span class="keyword">true</span>);</div><div class="line">        picker.setColumnWeight(<span class="number">0.5f</span>,<span class="number">0.5f</span>,<span class="number">1</span>);</div><div class="line">        picker.setWheelModeEnable(<span class="keyword">true</span>);</div><div class="line">        picker.setTextSize(<span class="number">18</span>);</div><div class="line">        picker.setSelectedTextColor(<span class="number">0xFF279BAA</span>);<span class="comment">//前四位值是透明度</span></div><div class="line">        picker.setUnSelectedTextColor(<span class="number">0xFF999999</span>);</div><div class="line">        picker.setCanLoop(<span class="keyword">true</span>);</div><div class="line">        picker.setOffset(<span class="number">3</span>);</div><div class="line">        picker.setOnMoreItemPickListener(<span class="keyword">new</span> OnMoreItemPickListener&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemPicked</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</div><div class="line">                s3 = !TextUtils.isEmpty(s3) ? <span class="string">",item3: "</span>+s3 : <span class="string">""</span>;</div><div class="line">                Toast.makeText(NextActivity.<span class="keyword">this</span>, <span class="string">"item1: "</span>+s1 +<span class="string">",item2: "</span>+s2+ s3, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        picker.setOnMoreWheelListener(<span class="keyword">new</span> OnMoreWheelListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFirstWheeled</span><span class="params">(<span class="keyword">int</span> index, String item)</span> </span>&#123;</div><div class="line">                textView.setText(item + <span class="string">":"</span> + picker.getSelectedSecondItem());</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSecondWheeled</span><span class="params">(<span class="keyword">int</span> index, String item)</span> </span>&#123;</div><div class="line">                textView.setText(picker.getSelectedFirstItem() + <span class="string">":"</span> + item);</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onThirdWheeled</span><span class="params">(<span class="keyword">int</span> index, String item)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125; );</div><div class="line">        ViewGroup viewGroup = findView(R.id.wheelview_container);</div><div class="line">        viewGroup.addView(picker.getContentView());</div></pre></td></tr></table></figure>
<h4 id="选择器各个设置项："><a href="#选择器各个设置项：" class="headerlink" title="选择器各个设置项："></a>选择器各个设置项：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> isChinese = Locale.getDefault().getDisplayLanguage().contains(<span class="string">"中文"</span>);</div><div class="line">OptionPicker picker = <span class="keyword">new</span> OptionPicker(<span class="keyword">this</span>,</div><div class="line">        isChinese ? <span class="keyword">new</span> String[]&#123;</div><div class="line">                <span class="string">"水瓶"</span>, <span class="string">"双鱼"</span>, <span class="string">"白羊"</span>, <span class="string">"金牛"</span>, <span class="string">"双子"</span>, <span class="string">"巨蟹"</span>,</div><div class="line">                <span class="string">"狮子"</span>, <span class="string">"处女"</span>, <span class="string">"天秤"</span>, <span class="string">"天蝎"</span>, <span class="string">"射手"</span>, <span class="string">"摩羯"</span></div><div class="line">        &#125; : <span class="keyword">new</span> String[]&#123;</div><div class="line">                <span class="string">"Aquarius"</span>, <span class="string">"Pisces"</span>, <span class="string">"Aries"</span>, <span class="string">"Taurus"</span>, <span class="string">"Gemini"</span>, <span class="string">"Cancer"</span>,</div><div class="line">                <span class="string">"Leo"</span>, <span class="string">"Virgo"</span>, <span class="string">"Libra"</span>, <span class="string">"Scorpio"</span>, <span class="string">"Sagittarius"</span>, <span class="string">"Capricorn"</span></div><div class="line">        &#125;);</div><div class="line">picker.setLabel(isChinese ? <span class="string">"座"</span> : <span class="string">""</span>);</div><div class="line">picker.setCycleDisable(<span class="keyword">true</span>);<span class="comment">//禁用循环</span></div><div class="line">picker.setLineConfig(config);</div><div class="line">picker.setTopHeight(<span class="number">50</span>);<span class="comment">//顶部标题栏高度</span></div><div class="line">picker.setTopLineColor(<span class="number">0xFF33B5E5</span>);<span class="comment">//顶部标题栏下划线颜色</span></div><div class="line">picker.setTopLineHeight(<span class="number">1</span>);<span class="comment">//顶部标题栏下划线高度</span></div><div class="line">picker.setTitleText(isChinese ? <span class="string">"请选择"</span> : <span class="string">"Please pick"</span>);</div><div class="line">picker.setTitleTextColor(<span class="number">0xFF999999</span>);<span class="comment">//顶部标题颜色</span></div><div class="line">picker.setTitleTextSize(<span class="number">12</span>);<span class="comment">//顶部标题文字大小</span></div><div class="line">picker.setCancelTextColor(<span class="number">0xFF33B5E5</span>);<span class="comment">//顶部取消按钮文字颜色</span></div><div class="line">picker.setCancelTextSize(<span class="number">14</span>);</div><div class="line">picker.setSubmitTextColor(<span class="number">0xFF33B5E5</span>);<span class="comment">//顶部确定按钮文字颜色</span></div><div class="line">picker.setSubmitTextSize(<span class="number">14</span>);</div><div class="line">picker.setTextColor(<span class="number">0xFFEE0000</span>, <span class="number">0xFF999999</span>);<span class="comment">//中间滚动项文字颜色</span></div><div class="line">WheelView.LineConfig config = <span class="keyword">new</span> WheelView.LineConfig();</div><div class="line">config.setColor(<span class="number">0xFFEE0000</span>);<span class="comment">//线颜色</span></div><div class="line">config.setAlpha(<span class="number">140</span>);<span class="comment">//线透明度</span></div><div class="line">picker.setLineConfig(config);</div><div class="line">picker.setBackgroundColor(<span class="number">0xFFE1E1E1</span>);</div><div class="line"><span class="comment">//picker.setSelectedItem(isChinese ? "射手" : "Sagittarius");</span></div><div class="line">picker.setSelectedIndex(<span class="number">10</span>);<span class="comment">//默认选中项</span></div><div class="line">picker.setOnOptionPickListener(<span class="keyword">new</span> OptionPicker.OnOptionPickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOptionPicked</span><span class="params">(<span class="keyword">int</span> index, String item)</span> </span>&#123;</div><div class="line">        showToast(<span class="string">"index="</span> + index + <span class="string">", item="</span> + item);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">picker.show();</div></pre></td></tr></table></figure>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-56-50.png" alt="效果图"><br><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-56-00.png" alt="效果图"><br><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-45-59.png" alt="效果图"><br><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-56-22.png" alt="效果图"><br><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-56-38.png" alt="效果图"><br><img src="http://oj6uq9cjj.bkt.clouddn.com/image/jpg/Screenshot_2017-04-21-15-46-11.png" alt="效果图"></p>
]]></content>
      
        
        <tags>
            
            <tag> android,picker,wheelview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义控件之绘图篇：drawText详解]]></title>
      <url>/2017/03/07/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8BdrawText%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><font color="#00ACC1">一、概述<font></font></font></h2><h4 id="1-四线格与基线"><a href="#1-四线格与基线" class="headerlink" title="1. 四线格与基线"></a><font color="#01579B">1. 四线格与基线<font></font></font></h4><p>  小时候，我们在刚开始学习写字母时，用的本子是四线格的，我们必须把字母按照规则写在四线格内。<br>  比如：</p>
<p>  <img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/abcdef.jpg" alt="26英文字母"><br>  <a id="more"></a></p>
<p>  那么问题来了，在canvas在利用drawText绘制文字时，也是有规则的，这个规则就是baseline（基线）！<br>我们先来看一下什么是基线：</p>
<p>  <img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/drawtext_baseline.jpg" alt="基线"></p>
<p>  对比以上两图，可见基线就是四线格中的第三条线！也就是说，只要基线的位置定了，那文字的位置必然是定了的！</p>
<h4 id="2-canvas-drawText"><a href="#2-canvas-drawText" class="headerlink" title="2. canvas.drawText()"></a><font color="#01579B">2. canvas.drawText()<font></font></font></h4><h5 id="（1）canvas-drawText-与基线"><a href="#（1）canvas-drawText-与基线" class="headerlink" title="（1）canvas.drawText()与基线"></a><font color="#388E3C">（1）canvas.drawText()与基线<font></font></font></h5><p>下面我们来看看canvas.drawText()这个函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* text:要绘制的文字</div><div class="line">* x：绘制原点x坐标</div><div class="line">* y：绘制原点y坐标</div><div class="line">* paint:用来做画的画笔</div><div class="line">*/  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(String text, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></div></pre></td></tr></table></figure>
<p>上面这个构造函数是最常用的drawText方法，传进去一个String对象就能画出对应的文字。<br>但这里有两个参数需要非常注意，表示原点坐标的x和y.很多同学可能会认为，这里传进去的原点参数(x,y)是所在绘制文字所在矩形的左上角的点。但实际上并不是！比如，我们上面如果要画<strong>“matt’s blog”</strong>这几个字，这个原点坐标应当是下图中绿色小点的位置</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/drawtext_baseline_point.png" alt=""></p>
<h5 id="（2）实例"><a href="#（2）实例" class="headerlink" title="（2）实例"></a><font color="#388E3C">（2）实例<font></font></font></h5><p> 下面我们就举个例子来看一下drawText中，原点坐标(x,y)的位置。</p>
<ul>
<li>新建一个工程，创建一个MainActivity,然后创建一个CustomTextView继承View<br>重写onDraw函数<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重写onDraw函数，自定义一个基线，然后利用drawText画出来</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在这里，先定义drawText原点的位置：（0，200）<br>首先，我们把(0,200)所在的这条横线画出来，所以我先画了一条线从点坐标为(0,200)到点坐标为(2500,200)的一条直线<br>然后利用canvas.drawText以（0，200）为原点画出文字</p>
<ul>
<li>在main.xml添加自定义view的引用</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;android.support.constraint.ConstraintLayout</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    app:layout_behavior="@string/appbar_scrolling_view_behavior"</div><div class="line">    tools:showIn="@layout/app_bar_main"</div><div class="line">    tools:context="cn.addapp.customviews.MainActivity"&gt;</div><div class="line"></div><div class="line">    &lt;cn.addapp.customviews.views.CustomTextView</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"/&gt;</div><div class="line"></div><div class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-07-17-10-02.png" alt="效果图"></p>
<h5 id="结论："><a href="#结论：" class="headerlink" title="结论："></a><font color="#388E3C">结论：<font></font></font></h5><p> &emsp;&emsp;<font color="#388E3C">1. drawText是中的参数y是基线的位置。<font><br></font></font></p>
<p> &emsp;&emsp;<font color="#388E3C">2. 一定要清楚的是，只要x坐标、基线位置、文字大小确定以后，文字的位置就是确定的了。<font></font></font></p>
<h4 id="3-paint-setTextAlign-Paint-Align-XXX"><a href="#3-paint-setTextAlign-Paint-Align-XXX" class="headerlink" title="3. paint.setTextAlign(Paint.Align.XXX)"></a><font color="#01579B">3. paint.setTextAlign(Paint.Align.XXX)<font></font></font></h4><p>在上面我们讲了，drawText()函数中的Y坐标表示所要绘制文字的基线所在位置。从上面的例子，我们可以看到，我们绘图结果是在X坐标的右边开始绘制的，但这并不是必然的结果。<br>我们来看一张图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/drawtext_baseline_point_mark.png" alt="mark"></p>
<p>我们知道，我们在drawText(text, x, y, paint)中传进去的源点坐标(x,y);其中，y表示的基线的位置。那x代表什么呢？从上面的例子运行结果来看，应当是文字开始绘制的地方。<br><br>并不是所要绘制文字所在矩形的相对位置。相对位置就是指定点（x,y）在在所要绘制矩形的位置。我们知道所绘制矩形的纵坐标是由Y值来确定的，而相对x坐标的位置，只有左、中、右三个位置了。也就是所绘制矩形可能是在x坐标的左侧绘制，也有可能在x坐标的中间，也有可能在x坐标的右侧。而定义在x坐标在所绘制矩形相对位置的函数是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 其中Align的取值为：Panit.Align.LEFT,Paint.Align.CENTER,Paint.Align.RIGHT</div><div class="line">*/  </div><div class="line"></div><div class="line">paint.setTextAlign(Align align);</div></pre></td></tr></table></figure></p>
<p>我们再来重新看一下上面的例子，当我们设置为不同的值时，绘制结果是怎样的。<br>同样的代码，我们加上paint.setTextAlign()来设置相对位置来看看结果。</p>
<h5 id="（1）setTextAlign-Paint-Align-LEFT"><a href="#（1）setTextAlign-Paint-Align-LEFT" class="headerlink" title="（1）setTextAlign(Paint.Align.LEFT)"></a><font color="#388E3C">（1）setTextAlign(Paint.Align.LEFT)<font></font></font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.LEFT);  </div><div class="line">    canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-07-17-10-02.png" alt="效果图"></p>
<p> <font color="RED">可见，原点(x,y)在矩形的左侧，即矩形从(x,y)的点开始绘制<font></font></font></p>
<h5 id="（2）setTextAlign-Paint-Align-CENTER"><a href="#（2）setTextAlign-Paint-Align-CENTER" class="headerlink" title="（2）setTextAlign(Paint.Align.CENTER)"></a><font color="#388E3C">（2）setTextAlign(Paint.Align.CENTER)<font></font></font></h5><p>同样的代码，把相对位置设置为：setTextAlign(Paint.Align.CENTER)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.CENTER);  </div><div class="line">    canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-08-11-29-39.png" alt="效果图"></p>
<p>所以原点（x,y）就在所要绘制文字所在矩形区域的正中间，换句话说，系统会根据(x,y)的位置和文字所在矩形大小，会计算出当前开始绘制的点。以使原点(x,y)正好在所要绘制的矩形的正中间。</p>
<h5 id="（3）setTextAlign-Paint-Align-RIGHT"><a href="#（3）setTextAlign-Paint-Align-RIGHT" class="headerlink" title="（3）setTextAlign(Paint.Align.RIGHT)"></a><font color="#388E3C">（3）setTextAlign(Paint.Align.RIGHT)<font></font></font></h5><p>同样的代码，把相对位置设置为：setTextAlign(Paint.Align.RIGHT)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.RIGHT);  </div><div class="line">    canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-08-11-30-29.png" alt="效果图"></p>
<p>所以原点（x,y）应当在所要绘制矩形的右侧，在上面的代码中，也就是说整个矩形都在（0,200）的左侧，所以我们看到的是什么都没有。</p>
<h5 id="（4）注意"><a href="#（4）注意" class="headerlink" title="（4）注意"></a><font color="#388E3C">（4）注意<font></font></font></h5><p>下面，我们再看一个例子：<br>我们只写一个大写字母 M，然后将其相对位置设置为paint.setTextAlign(Paint.Align.CENTER)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.CENTER);  </div><div class="line">    canvas.drawText(<span class="string">"M"</span>, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-08-11-42-14.png" alt="效果图"></p>
<p>我们可以看到字母M在原点(0，200)的正中间。<br>这也就是我们要强调的：相对位置是根据所要绘制文字所在矩形来计算的。</p>
<h2 id="二、drawText的四线格与FontMetrics"><a href="#二、drawText的四线格与FontMetrics" class="headerlink" title="二、drawText的四线格与FontMetrics"></a><font color="#00ACC1">二、drawText的四线格与FontMetrics<font></font></font></h2><h5 id="1、Text的绘图四线格"><a href="#1、Text的绘图四线格" class="headerlink" title="1、Text的绘图四线格"></a><font color="#388E3C">1、Text的绘图四线格<font></font></font></h5><p>前面我们讲了基线，其实除了基线，系统在绘制Text时，还是有其它线的，我们来看个图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/snipaste_20170309_202149.png" alt="效果图"></p>
<p>除了基线以外，如上图所示，另外还有四条线，分别是ascent,descent,top,bottom，他们的意义分别是：</p>
<ul>
<li>ascent: 系统建议的，绘制单个字符时，字符应当的最高高度所在线</li>
<li>descent:系统建议的，绘制单个字符时，字符应当的最低高度所在线</li>
<li>top: 可绘制的最高高度所在线</li>
<li>bottom: 可绘制的最低高度所在线</li>
</ul>
<p>单从这几个定义，大家可能还是搞不清这几值到底是什么意义。我们来看一下电视的显示。用过视频处理工具的同学（比如premiere,AE,绘声绘影等）,应该都会知道，在制作视频时，视频显示位置都会有一个安全区域框，如下图所示：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/snipaste_20170309_203930.png" alt="效果图"></p>
<p>如上图所示，黑色部分表示电视屏幕，红色框就表示安全区域框。<br>这个安全框是用来干嘛的？这个安全框就是系统推荐给我们的显示区域，虽然说我们可以讲电视屏幕是每个区域都是可以显示图像的，但由于制式的不同，每个国家的屏幕大小并不一定我们这里的屏幕大小一致，当遇到不一致时，就会裁剪。但系统给我们推荐的显示区域是无论哪种制式都是可以完整显示出来的，所以我们在制作视频时，尽量要把要显示的图像放在所推荐的显示区域内。<br>同样，在这里，我们在绘制文字时，ascent是推荐的绘制文字的最高高度，就表示在绘制文字时，尽力要在这个最高高度以下绘制文字。descent是推荐的绘制文字的最底高度线，同样表示是在绘制文字时尽量在这个descent线以上来绘制文字。而top线则指该文字可以绘制的最高高度线，bottom则是表示该文字可以绘制的最低高度线。ascent,descent是系统建议上的绘制高度，而top,bottom则是物理上屏幕最高，最低可以画的高度值。他们的差别与我们上面说的视频处理的安全框和屏幕的道理是一样的。</p>
<h5 id="2、FontMetrics"><a href="#2、FontMetrics" class="headerlink" title="2、FontMetrics"></a><font color="#388E3C">2、FontMetrics<font></font></font></h5><h6 id="（1）、fontMetrics概述"><a href="#（1）、fontMetrics概述" class="headerlink" title="（1）、fontMetrics概述"></a><font color="#388E3C">（1）、fontMetrics概述<font></font></font></h6><p>上面我们讲了，系统在画文字时的五条线，baseline、ascent、descent、top、bottom我们知道baseline的位置是我们在构造drawText()时的参数y来决定的，那ascent,descent,top,bottom这些线的位置要怎么计算出来呢？<br>Android给我们提供了一个类：FontMetrics，它里面有四个成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FontMetrics::ascent;  </div><div class="line">FontMetrics::descent;  </div><div class="line">FontMetrics::top;  </div><div class="line">FontMetrics::bottom;</div></pre></td></tr></table></figure></p>
<p>他们的意义与值的计算方法分别如下：</p>
<ul>
<li><font color="#388E3C">ascent = ascent线的y坐标 - baseline线的y坐标；<font></font></font></li>
<li><font color="#388E3C">descent = descent线的y坐标 - baseline线的y坐标；<font></font></font></li>
<li><font color="#388E3C">top = top线的y坐标 - baseline线的y坐标；<font></font></font></li>
<li><font color="#388E3C">bottom = bottom线的y坐标 - baseline线的y坐标；<font></font></font></li>
</ul>
<p>我们再来看这个图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/snipaste_20170309_202149.png" alt="效果图"></p>
<p>从这个图中，我们先说明两点，然后再回过头来看上面的公式：<br><br>1、X轴，Y轴的正方向走向是X轴向右是正方向，Y轴向下是正方向，所以越往右X坐标越大，越往下Y坐标越大！<br><br>2、大家千万不要将FontMetrics中的ascent,descent,top,bottom与现实中的ascent,descent,top,bottom所在线混淆！<br><br>这几条线是真实存在的，而FontMetrics中的ascent,descent,top,bottom这个变量的值就是用来计算这几条线的位置的。下面我们将看到如何利用这几个变量来计算这几条线的位置。<br>看完这个图，我们再重新说说这几个公式，我们拿一个来说吧，其它都是相同的道理。</p>
<blockquote>
<p>ascent = ascent线的y坐标 - baseline线的y坐标；</p>
</blockquote>
<p>FontMetrics的这几个变量的值都是以baseline为基准的，对于ascent来说，baseline线在ascent线之下，所以必然baseline的y值要大于ascent线的y值，所以ascent变量的值是负的。<br>同理，对于descent而言：</p>
<blockquote>
<p>descent = descent线的y坐标 - baseline线的y坐标；</p>
</blockquote>
<p>descent线在baseline线之下，所以必然descent线的y坐标要大于baseline线的y坐标，所以descent变量的值必然是正数。</p>
<h6 id="（2）、得到Text四线格的各线位置"><a href="#（2）、得到Text四线格的各线位置" class="headerlink" title="（2）、得到Text四线格的各线位置"></a><font color="#388E3C">（2）、得到Text四线格的各线位置<font></font></font></h6><p>下面，我们就来看看如何通过这些变量来得到对应线所在位置吧。<br>我们先列出来一个公式：</p>
<blockquote>
<p>ascent线Y坐标 = baseline线Y坐标 + fontMetric.ascent;  </p>
</blockquote>
<p>推算过程如下：<br><br>因为ascent线的Y坐标等于baseline线的Y坐标减去从baseline线到ascent线的这段距离。<br><br>也就是：(|fontMetric.ascent|表示取绝对值)<br><br>ascent线Y坐标 = baseline线Y坐标 - |fontMetric.ascent|;<br><br>又因为fontMetric.ascent是负值，所以：<br><br>ascent线Y坐标 = baseline线Y坐标 - |fontMetric.ascent|;<br><br>ascent线Y坐标 = baseline线Y坐标 - （ -fontMetric.ascent）;<br><br>ascent线Y坐标 = baseline线Y坐标 + fontMetric.ascent;<br><br>这就是整个推算过程，没什么难度，同理可以得到：</p>
<ul>
<li><font color="#388E3C">ascent线Y坐标 = baseline线的y坐标 + fontMetric.ascent；<font></font></font></li>
<li><font color="#388E3C">descent线Y坐标 = baseline线的y坐标 + fontMetric.descent；<font></font></font></li>
<li><font color="#388E3C">top线Y坐标 = baseline线的y坐标 + fontMetric.top；<font></font></font></li>
<li><font color="#388E3C">bottom线Y坐标 = baseline线的y坐标 + fontMetric.bottom；<font></font></font></li>
</ul>
<h6 id="（3）、获取FontMetrics对象"><a href="#（3）、获取FontMetrics对象" class="headerlink" title="（3）、获取FontMetrics对象"></a><font color="#388E3C">（3）、获取FontMetrics对象<font></font></font></h6><p>获取FontMetrics对象是根据paint对象来获取的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">Paint.FontMetrics fm = paint.getFontMetrics();  </div><div class="line">Paint.FontMetricsInt fmInt = paint.getFontMetricsInt();</div><div class="line">`</div></pre></td></tr></table></figure>
<p>从这里可以看到，通过paint.getFontMetrics()得到对应的FontMetrics对象。这里还有另外一个FontMetrics同样的类叫做FontMetricsInt，它的意义与FontMetrics完全相同，只是得到的值的类型不一样而已，FontMetricsInt中的四个成员变量的值都是Int类型，而FontMetrics得到的四个成员变量的值则都是float类型的。</p>
<h6 id="（4）、实例：计算Text四线格位置"><a href="#（4）、实例：计算Text四线格位置" class="headerlink" title="（4）、实例：计算Text四线格位置"></a><font color="#388E3C">（4）、实例：计算Text四线格位置<font></font></font></h6><p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/Screenshot_2017-03-09-19-55-43.png" alt="效果图"></p>
<p>在这个例子中，我们先写一行字，然后画出这行字中的top线，ascent线，baseline线，descent线和bottom线。<br>我们直接上完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">     <span class="keyword">int</span> baseLineY = <span class="number">200</span>;</div><div class="line">     <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;</div><div class="line">     Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">     <span class="comment">//写文字</span></div><div class="line">     paint.setColor(Color.BLUE);</div><div class="line">     paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位</span></div><div class="line">     paint.setTextAlign(Paint.Align.LEFT);</div><div class="line">     canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);</div><div class="line"></div><div class="line">     <span class="comment">//计算各线在位置</span></div><div class="line">     Paint.FontMetrics fm = paint.getFontMetrics();</div><div class="line">     <span class="keyword">float</span> ascent = baseLineY + fm.ascent;</div><div class="line">     <span class="keyword">float</span> descent = baseLineY + fm.descent;</div><div class="line">     <span class="keyword">float</span> top = baseLineY + fm.top;</div><div class="line">     <span class="keyword">float</span> bottom = baseLineY + fm.bottom;</div><div class="line">     <span class="comment">//画基线</span></div><div class="line">     paint.setColor(Color.parseColor(<span class="string">"#FF0000"</span>));</div><div class="line">     paint.setFakeBoldText(<span class="keyword">true</span>);</div><div class="line">     paint.setStrokeWidth(<span class="number">3</span>);</div><div class="line">     canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);</div><div class="line">     <span class="comment">//画top</span></div><div class="line">     paint.setColor(Color.parseColor(<span class="string">"#196F3D"</span>));</div><div class="line">     canvas.drawLine(baseLineX, top, <span class="number">2500</span>, top, paint);</div><div class="line"></div><div class="line">     <span class="comment">//画ascent</span></div><div class="line">     paint.setColor(Color.parseColor(<span class="string">"#1A5276"</span>));</div><div class="line">     canvas.drawLine(baseLineX, ascent, <span class="number">2500</span>, ascent, paint);</div><div class="line"></div><div class="line">     <span class="comment">//画descent</span></div><div class="line">     paint.setColor(Color.parseColor(<span class="string">"#F1C40F"</span>));</div><div class="line">     canvas.drawLine(baseLineX, descent, <span class="number">2500</span>, descent, paint);</div><div class="line"></div><div class="line">     <span class="comment">//画bottom</span></div><div class="line">     paint.setColor(Color.parseColor(<span class="string">"#33FF00"</span>));</div><div class="line">     canvas.drawLine(baseLineX, bottom, <span class="number">2500</span>, bottom, paint);</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这段代码中，总共分为三部分，写文字、计算各线所在位置、画出各条线；我们逐段来讲<br>先看写文字：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> baseLineY = <span class="number">200</span>;</div><div class="line"><span class="keyword">int</span> baseLineX = <span class="number">0</span> ;</div><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div><div class="line"><span class="comment">//写文字</span></div><div class="line">paint.setColor(Color.BLUE);</div><div class="line">paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位</span></div><div class="line">paint.setTextAlign(Paint.Align.LEFT);</div><div class="line">canvas.drawText(<span class="string">"matt's blog"</span>, baseLineX, baseLineY, paint);</div></pre></td></tr></table></figure></p>
<p>有关drawText的问题我们已经讲过，在这段代码中，我们需要注意的是两点：<br>1、drawText中的参数y是基线的位置<br><br>2、paint.setTextAlign(Paint.Align.LEFT);设置的相对位置为，指定的原点(0,200)在绘制矩形的左侧。换句话说，所绘制的文字所在矩形在(0,200)点的右侧<br>然后是计算各各线的y坐标位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算各线在位置  </span></div><div class="line">Paint.FontMetrics fm = paint.getFontMetrics();  </div><div class="line"><span class="keyword">float</span> ascent = baseLineY + fm.ascent;  </div><div class="line"><span class="keyword">float</span> descent = baseLineY + fm.descent;  </div><div class="line"><span class="keyword">float</span> top = baseLineY + fm.top;  </div><div class="line"><span class="keyword">float</span> bottom = baseLineY + fm.bottom;</div></pre></td></tr></table></figure>
<p>首先，利用 paint.getFontMetrics()得到FontMetrics的实例，然后利用我们上面的公式即可得到各条线的y坐标。<br>最后就是利用这些y坐标画出这些线了，很简单，就是drawLine的使用，难度不大，就不再细讲。</p>
<h2 id="三、所绘文字宽度、高度和最小矩形获取"><a href="#三、所绘文字宽度、高度和最小矩形获取" class="headerlink" title="三、所绘文字宽度、高度和最小矩形获取"></a><font color="#00ACC1">三、所绘文字宽度、高度和最小矩形获取<font></font></font></h2><p>这部分，我们将讲解如何获取所绘制字符串所占区域的高度、宽度和仅包裹字符串的最小矩形。我们来看张图来讲述下他们的意义：<br><img src="http://oj6uq9cjj.bkt.clouddn.com/Screenshot_2017-03-10-15-18-17.png" alt="效果图"></p>
<p>在这张图中，文字底部的绿色框就是所绘制字符串所占据的大小。我们要求的宽度和高度也就是这个绿色框的宽度和高度。<br><br>从图中也可以看到，红色框部分，它的宽和高紧紧包围着字符串，所以红色框就是我们要求的最小矩形。即能包裹字符串的最小矩形。</p>
<h4 id="1、字符串所占高度和宽度"><a href="#1、字符串所占高度和宽度" class="headerlink" title="1、字符串所占高度和宽度"></a><font color="#01579B">1、字符串所占高度和宽度<font></font></font></h4><h6 id="（1）、高度"><a href="#（1）、高度" class="headerlink" title="（1）、高度"></a><font color="#388E3C">（1）、高度<font></font></font></h6><p>字符串所占高度很容易得到，直接用bottom线所在位置的Y坐标减去top线所在位置的Y坐标就是字符串所占的高度：<br><br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Paint.FontMetricsInt fm = paint.getFontMetricsInt();  </div><div class="line"><span class="keyword">int</span> top = baseLineY + fm.top;  </div><div class="line"><span class="keyword">int</span> bottom = baseLineY + fm.bottom;  </div><div class="line"><span class="comment">//所占高度  </span></div><div class="line"><span class="keyword">int</span> height = bottom - top;</div></pre></td></tr></table></figure></p>
<h6 id="（2）、宽度"><a href="#（2）、宽度" class="headerlink" title="（2）、宽度"></a><font color="#388E3C">（2）、宽度<font></font></font></h6><p>宽度是非常容易得到的，直接利用下面的函数就可以得到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width = paint.measureText(String text);</div></pre></td></tr></table></figure></p>
<p>使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String text = <span class="string">"matt's blog"</span>;</div><div class="line">Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line"></div><div class="line"><span class="comment">//设置paint  </span></div><div class="line">paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line"><span class="comment">//获取宽度  </span></div><div class="line"><span class="keyword">int</span> width = (<span class="keyword">int</span>)paint.measureText(text);</div></pre></td></tr></table></figure>
<h6 id="（3）、最小矩形"><a href="#（3）、最小矩形" class="headerlink" title="（3）、最小矩形"></a><font color="#388E3C">（3）、最小矩形<font></font></font></h6><h6 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><font color="#00ACC1">1、概述<font></font></font></h6><p>要获取最小矩形，也是通过系统函数来获取的，函数及意义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取指定字符串所对应的最小矩形，以（0，0）点所在位置为基线</div><div class="line"> * <span class="doctag">@param</span> text  要测量最小矩形的字符串</div><div class="line"> * <span class="doctag">@param</span> start 要测量起始字符在字符串中的索引</div><div class="line"> * <span class="doctag">@param</span> end   所要测量的字符的长度</div><div class="line"> * <span class="doctag">@param</span> bounds 接收测量结果</div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTextBounds</span><span class="params">(String text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Rect bounds)</span></span>;</div></pre></td></tr></table></figure></p>
<p>我们简单展示下使用代码及结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String text = <span class="string">"matt's blog"</span>;  </div><div class="line">Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line"><span class="comment">//设置paint  </span></div><div class="line">paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line"></div><div class="line">Rect rect = <span class="keyword">new</span> Rect();  </div><div class="line">paint.getTextBounds(text,<span class="number">0</span>,text.length(),rect);  </div><div class="line">Log.e(<span class="string">"matt"</span>,rect.toShortString());</div></pre></td></tr></table></figure></p>
<p>在这段代码中，首先设置字体大小，然后利用paint.getTextBounds（）得到最小矩形，最后，我将其打印出来<br>结果如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/snipaste_20170310_112242.png" alt=""></p>
<p>可以看到这个矩形的左上角位置为（8，-90），右下角的位置为（580，25）；<br>大家可能会有疑问，为什么左上角的Y坐标是个负数？从代码中，我们也可以看到，我们并没有给getTextBounds（）传递基线位置。那它就是以（0，0）为基线来得到这个最小矩形的！所以这个最小矩形的位置就是以（0，0）为基线的结果！</p>
<h6 id="2、得到最小矩形的实际位置"><a href="#2、得到最小矩形的实际位置" class="headerlink" title="2、得到最小矩形的实际位置"></a><font color="#00ACC1">2、得到最小矩形的实际位置<font></font></font></h6><p>我们先来看一个原理：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/blog/imgs/snipaste_20170310_145530.png" alt=""></p>
<p>在上面这个图中，我们将黑色矩形平行下移距离Y（黄色线依照的是基线的位置），那么平移后的左上角点的y坐标就是 y2 = y1 + Y;<br>同样的道理，由于paint.getTextBounds（）得到最小矩形的基线是y = 0;那我们直接将这个矩形移动baseline的距离就可以得到这个矩形实际应当在的位置了。<br>所以矩形应当所在实际位置的坐标是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Rect minRect = <span class="keyword">new</span> Rect();  </div><div class="line">paint.getTextBounds(text,<span class="number">0</span>,text.length(),minRect);  </div><div class="line"><span class="comment">//最小矩形，实际top位置  </span></div><div class="line"><span class="keyword">int</span> minTop = minRect.top + baselineY;  </div><div class="line"><span class="comment">//最小矩形，实际bottom位置  </span></div><div class="line"><span class="keyword">int</span> minBottom = minRect.bottom + baselineY;</div></pre></td></tr></table></figure></p>
<h6 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a><font color="#00ACC1">3、实例<font></font></font></h6><p>下面我们就举个例子来看一下我们列举的这几个函数的使用方法<br>效果图与这一节开篇时的效果图是一样的，如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/Screenshot_2017-03-10-15-18-17.png" alt="效果图"></p>
<p>我们先看一下完整的代码，然后再细讲<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    String text = <span class="string">"matt's blog"</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//设置paint  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.LEFT);  </div><div class="line"></div><div class="line">    <span class="comment">//画text所占的区域  </span></div><div class="line">    Paint.FontMetricsInt fm = paint.getFontMetricsInt();  </div><div class="line">    <span class="keyword">int</span> top = baseLineY + fm.top;  </div><div class="line">    <span class="keyword">int</span> bottom = baseLineY + fm.bottom;  </div><div class="line">    <span class="keyword">int</span> width = (<span class="keyword">int</span>)paint.measureText(text);  </div><div class="line">    Rect rect = <span class="keyword">new</span> Rect(baseLineX,top,baseLineX+width,bottom);  </div><div class="line"></div><div class="line">    paint.setColor(Color.GREEN);  </div><div class="line">    canvas.drawRect(rect,paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画最小矩形  </span></div><div class="line">    Rect minRect = <span class="keyword">new</span> Rect();  </div><div class="line">    paint.getTextBounds(text,<span class="number">0</span>,text.length(),minRect);  </div><div class="line">    minRect.top = baseLineY + minRect.top;  </div><div class="line">    minRect.bottom = baseLineY + minRect.bottom;  </div><div class="line">    paint.setColor(Color.RED);  </div><div class="line">    canvas.drawRect(minRect,paint);  </div><div class="line"></div><div class="line">    <span class="comment">//写文字  </span></div><div class="line">    paint.setColor(Color.WHITE);  </div><div class="line">    canvas.drawText(text, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码总共分为四部分：设置paint,画字符串所占据矩形，画最小矩形，画文字</p>
<h6 id="第一部分：设置paint"><a href="#第一部分：设置paint" class="headerlink" title="第一部分：设置paint"></a><font color="#00ACC1">第一部分：设置paint<font></font></font></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String text = <span class="string">"matt's blog"</span>;  </div><div class="line"><span class="keyword">int</span> baseLineY = <span class="number">200</span>;  </div><div class="line"><span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line"><span class="comment">//设置paint  </span></div><div class="line">Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">paint.setTextAlign(Paint.Align.LEFT);</div></pre></td></tr></table></figure>
<p>设置paint这部分，主要是设置字体的大小，因为我们在字体所占的区域大小跟字体的大小是有直接关系的，如果不设置，那么在获取所占区域大小时，将利用系统默认的大小来测量了，当然是不行的。</p>
<h6 id="第二部分：画text所占的区域"><a href="#第二部分：画text所占的区域" class="headerlink" title="第二部分：画text所占的区域"></a><font color="#00ACC1">第二部分：画text所占的区域<font></font></font></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画text所占的区域  </span></div><div class="line">Paint.FontMetricsInt fm = paint.getFontMetricsInt();  </div><div class="line"><span class="keyword">int</span> top = baseLineY + fm.top;  </div><div class="line"><span class="keyword">int</span> bottom = baseLineY + fm.bottom;  </div><div class="line"><span class="keyword">int</span> width = (<span class="keyword">int</span>)paint.measureText(text);  </div><div class="line">Rect rect = <span class="keyword">new</span> Rect(baseLineX,top,baseLineX+width,bottom);  </div><div class="line"></div><div class="line">paint.setColor(Color.GREEN);  </div><div class="line">canvas.drawRect(rect,paint);</div></pre></td></tr></table></figure>
<p> <font color="#196F3D"><br>这里就是利用我们前面我们讲过的获取top线和bottom线的方法，获取宽度时就是利用paint.measureText(text)；<br>然后利用求得到top,bottom,width来得到对应的矩形：Rect(baseLineX,top,baseLineX+width,bottom)，这里要注意的是我们利用paint.measureText(text)得到的只是宽度，矩形右下角的x坐标值为baselinex+width;<br>但需要注意的是：矩形右下角的值并不一定是baselinex+width！它的具体取值是跟paint.setTextAlign(Paint.Align.LEFT)有关的，因为我们这里设置为Paint.Align.LEFT，所以是baselinex+width。如果设置为Paint.Align.CENTER,那么右下角的X坐标值为baselinex+width/2；再者如果设置为Paint.Align.RIGHT,那么右下角的X坐标就是baselineX;所占矩形的四个角的所有位置是与paint.setTextAlign()的设置紧密相关的，至于各个点的计算方法就不再细讲了，根据我们前面讲的paint.setTextAlign()的显示效果是非常容易想到的。</font></p>
<font>

<h6 id="第三部分：画最小区域矩形"><a href="#第三部分：画最小区域矩形" class="headerlink" title="第三部分：画最小区域矩形"></a><font color="#00ACC1">第三部分：画最小区域矩形<font></font></font></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画最小矩形  </span></div><div class="line">Rect minRect = <span class="keyword">new</span> Rect();  </div><div class="line">paint.getTextBounds(text,<span class="number">0</span>,text.length(),minRect);  </div><div class="line">minRect.top = baseLineY + minRect.top;  </div><div class="line">minRect.bottom = baseLineY + minRect.bottom;  </div><div class="line">paint.setColor(Color.RED);  </div><div class="line">canvas.drawRect(minRect,paint);</div></pre></td></tr></table></figure>
<p>这部分也就没什么难度了，首先根据paint.getTextBounds（）得到基线为y=0的最小矩形的各点坐标，然后根据基线得到其实际的top和bottom坐标；然后将其画出来即可</p>
<h6 id="第四部分：画文字"><a href="#第四部分：画文字" class="headerlink" title="第四部分：画文字"></a><font color="#00ACC1">第四部分：画文字<font></font></font></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画文字  </span></div><div class="line">paint.setColor(Color.WHITE);  </div><div class="line">canvas.drawText(text, baseLineX, baseLineY, paint);</div></pre></td></tr></table></figure>
<h2 id="四、定点写字"><a href="#四、定点写字" class="headerlink" title="四、定点写字"></a><font color="#01579B">四、定点写字<font></font></font></h2><p>讲完上面的三部分，这篇文章所要讲的知识点基本就结束了，下面就是应用的部分了，在这部分中，我们将讲述，当我们设定一个点，如何到得基线位置，进而画出字符串。</p>
<h6 id="1、给定左上顶点绘图"><a href="#1、给定左上顶点绘图" class="headerlink" title="1、给定左上顶点绘图"></a><font color="#00ACC1">1、给定左上顶点绘图<font></font></font></h6><p>这部分，我们假定给出所要绘制矩形的左上角顶点坐标，然后画出这个文字。<br>先来看效果图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/snipaste_20170310_155716.png" alt=""></p>
<p>在这个图中，我们给定左上角的位置，即(left,top)；我们知道要画文字，drawText()中传进去的Y坐标是基线的位置，所以我们就必须根据top的位置计算出baseline的位置。<br>我们来看一个公式：<br><br>FontMetrics.top = top - baseline;<br><br>所以baseline = top - FontMetrics.top;<br><br>因为FontMetrics.top是可以得到的，又因为我们的top坐标是给定的，所以通过这个公式就能得到baseline的位置了。<br><br>下面举个例子来说明一下根据矩形左上项点绘制文字的过程：<br>先看下效果图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/Screenshot_2017-03-10-15-52-50.png" alt=""></p>
<p>在这个效果图中，因为我们会给定矩形左上角顶点(left,top)，所以们先画出top线的位置，然后计算出baseline的位置，并画出来。最后根据baseline把文字写出来。<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    String text = <span class="string">"matt's blog"</span>;  </div><div class="line">    <span class="keyword">int</span> top = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//设置paint  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.LEFT);  </div><div class="line"></div><div class="line">    <span class="comment">//画top线  </span></div><div class="line">    paint.setColor(Color.parseColor(<span class="string">"#196F3D"</span>));  </div><div class="line">    canvas.drawLine(baseLineX, top, <span class="number">2500</span>, top, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//计算出baseLine位置  </span></div><div class="line">    Paint.FontMetricsInt fm = paint.getFontMetricsInt();  </div><div class="line">    <span class="keyword">int</span> baseLineY = top - fm.top;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    paint.setColor(Color.parseColor(<span class="string">"#FF0000"</span>));  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">2500</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    canvas.drawText(text, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码，比较简单，首先是我们给定top给的位置int top = 200;然后根据top线位置计算出baseline所在位置,并画出来.</p>
<h6 id="2、给定中间线位置绘图"><a href="#2、给定中间线位置绘图" class="headerlink" title="2、给定中间线位置绘图"></a><font color="#00ACC1">2、给定中间线位置绘图<font></font></font></h6><p>先看效果图：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/snipaste_20170310_163121.png" alt=""></p>
<p>在这个图中，总共有四条线：top线，bottom线，baseline和center线；<br><br>图中center线正是在top线和bottom线的正中间。<br><br>为了方便推导公式，我另外标了三个距离A,B,C;<br><br>很显然，距离A和距离C是相等的，都等于文字所在矩形高度以的一半，即：<br><br>A = C = (bottom - top)/2;<br><br>又因为bottom = baseline + FontMetrics.bottom;<br><br>top = baseline+FontMetrics.top;<br><br>所以，将它们两个代入上面的公式，就可得到：<br><br>A = C = (FontMetrics.bottom - FontMetrics.top)/2;<br><br>而距离B,则表示Center线到baseline的距离。<br><br>很显然距离B = C - (bottom - baseline);<br><br>又因为<br><br>FontMetrics.bottom = bottom-baseline;<br><br>C = A;<br><br>所以，B = A - FontMetrics.bottom;<br><br>所以baseline = center + B = center + A - FontMetrics.bottom = center +<br> (FontMetrics.bottom - FontMetrics.top)/2 - FontMetrics.bottom;<br></p>
<p>根据上面的推导过程，我们最终可知，当给定中间线center位置以后，baseline的位置为：<br></p>
<p>baseline = center + (FontMetrics.bottom - FontMetrics.top)/2 - FontMetrics.bottom;<br>下面我们举个例子来说明下这个公式的用法。<br><br>效果图如下：</p>
<p><img src="http://oj6uq9cjj.bkt.clouddn.com/Screenshot_2017-03-10-16-38-27.png" alt=""></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);  </div><div class="line"></div><div class="line">    String text = <span class="string">"matt's blog"</span>;  </div><div class="line">    <span class="keyword">int</span> center = <span class="number">200</span>;  </div><div class="line">    <span class="keyword">int</span> baseLineX = <span class="number">0</span> ;  </div><div class="line"></div><div class="line">    <span class="comment">//设置paint  </span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();  </div><div class="line">    paint.setTextSize(<span class="number">120</span>); <span class="comment">//以px为单位  </span></div><div class="line">    paint.setTextAlign(Paint.Align.LEFT);  </div><div class="line"></div><div class="line">    <span class="comment">//画center线  </span></div><div class="line">    paint.setColor(Color.parseColor(<span class="string">"#1A5276"</span>));  </div><div class="line">    paint.setFakeBoldText(<span class="keyword">true</span>);</div><div class="line">    paint.setStrokeWidth(<span class="number">3</span>);</div><div class="line">    canvas.drawLine(baseLineX, center, <span class="number">3000</span>, center, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//计算出baseLine位置  </span></div><div class="line">    Paint.FontMetricsInt fm = paint.getFontMetricsInt();  </div><div class="line">    <span class="keyword">int</span> baseLineY = center + (fm.bottom - fm.top)/<span class="number">2</span> - fm.bottom;  </div><div class="line"></div><div class="line">    <span class="comment">//画基线  </span></div><div class="line">    paint.setColor(Color.parseColor(<span class="string">"#FF0000"</span>));</div><div class="line">    paint.setFakeBoldText(<span class="keyword">true</span>);</div><div class="line">    paint.setStrokeWidth(<span class="number">3</span>);  </div><div class="line">    canvas.drawLine(baseLineX, baseLineY, <span class="number">3000</span>, baseLineY, paint);  </div><div class="line"></div><div class="line">    <span class="comment">//画文字  </span></div><div class="line">    paint.setColor(Color.BLUE);  </div><div class="line">    canvas.drawText(text, baseLineX, baseLineY, paint);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码根据给定中间线的位置为200,然后计算出baseline的位置，然后把文字在baseline的基础上画出来。</p>
</font>]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全球公认最健康的作息时间表]]></title>
      <url>/2017/01/18/%E5%85%A8%E7%90%83%E5%85%AC%E8%AE%A4%E6%9C%80%E5%81%A5%E5%BA%B7%E7%9A%84%E4%BD%9C%E6%81%AF%E6%97%B6%E9%97%B4%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h3 id="你的作息健康吗？"><a href="#你的作息健康吗？" class="headerlink" title="你的作息健康吗？"></a>你的作息健康吗？</h3><h6 id="年轻可不是挥霍的资本，身体是革命的本钱！这里有全球公认最健康的作息时间表，赶紧收藏吧"><a href="#年轻可不是挥霍的资本，身体是革命的本钱！这里有全球公认最健康的作息时间表，赶紧收藏吧" class="headerlink" title="年轻可不是挥霍的资本，身体是革命的本钱！这里有全球公认最健康的作息时间表，赶紧收藏吧~"></a>年轻可不是挥霍的资本，身体是革命的本钱！这里有全球公认最健康的作息时间表，赶紧收藏吧~</h6><p>7:00 迎着清晨的阳光起床</p>
<font color="blue">一杯温水是早起之后的必需品，能让你获得一天最好的开始。</font>

<p>7:20-8:00 营养全面的早餐</p>
<font color="blue">一顿优质的早餐，能让你一整天都充满活力。</font>

<p>8:30-9:00 避免激烈运动</p>
<font color="blue">早上是人体免疫系统最弱的时候，不要做剧烈的运动，走路上班是很好的选择，健康又惬意。</font>

<a id="more"></a>
<p>9:00-10:00 做困难性工作</p>
<font color="blue">上午，人脑最清醒犀利，应该用来做最有难度的事。比如攻克工作的难题，给复杂的报告列提纲等等，充分利用好上午清醒的大脑。</font>

<p>10:30 让眼睛休息一下</p>
<font color="blue">一晃就十点半了，起来走动走动，眺望一下远方，做一做眼保健操，让眼睛舒缓舒缓。</font>

<p>11:00 吃点水果</p>
<font color="blue">上午工作得差不多了，该吃点水果了。上午是一天吃水果的最佳时机，因为上午人体最适合吸收水果里的营养。</font>

<p>12:00-12:30 午餐</p>
<font color="blue">午餐要吃饱，中午应该补充足够的蛋白质，豆类食品是最佳选择。虽然是午饭，久坐办公室的人也不要吃得太油腻。</font>

<p>13:00-14:00 午睡</p>
<font color="blue">午饭后的时间很宝贵，最好用来小睡一觉。有的人喜欢在中午网上购物或者是打激烈的游戏，这反而会让大脑处于过度紧张的状态，造成下午身体的疲惫。</font>

<p>14:00-16:00 做创意性工作</p>
<font color="blue">午后是人思维最活跃的时间，非常适合做一些创意性的工作。想一想工作中的创新，即使是微小的改善，日积月累也会有巨大的成就。</font>

<p>16:00 喝杯酸奶</p>
<font color="blue">四点左右，喝杯酸奶，能补充身体流失的血糖，而后将要投入到一天最密集的工作中了。</font>

<p>16:10-19:00 做细致性工作</p>
<font color="blue">四点到七点，身体和大脑都处于一天的巅峰状态，这时候我们应该做细致而密集的工作。</font>

<p>19:00 最佳的运动时间</p>
<font color="blue">下班之后稍微吃点东西，晚饭不要吃太多，三分饱即可。晚饭后稍微歇一会儿再开始运动。先散步，再慢跑，是非常健康的运动方式。</font>

<p>20:00 看电视或书</p>
<font color="blue">运动之后可以看看电视，或打开你阅读计划中的书放松阅读。最好的选择还是在娱乐休闲中延绵不绝地思考工作，这样会碰撞出意想不到的火花。</font>

<p>22:00 洗个热水澡</p>
<font color="blue">时间差不多就该洗个澡了，让身体彻底舒缓下来，洗去一天的疲惫。</font>

<p>22:30 上床睡觉</p>
<font color="blue">十一点，人体的各个器官都开始处于休息期了，不要违背身体的自然规律，放松睡一个好觉，明天又是美好的一天！</font>
]]></content>
      
        <categories>
            
            <category> life </category>
            
            <category> work </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown常用语法]]></title>
      <url>/2017/01/10/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>标题：</p>
<p>#h1级标题</p>
<p>##h2级标题</p>
<p>###h3级标题</p>
<p>####h4级标题</p>
<p>#####h5级标题</p>
<p>######h6级标题</p>
<p>分割线：三个以上的短线 即可作出分割线</p>
<hr>
<p>超链接：<a href="网址 , 标题">连接名称</a><br><a href="http://addapp.cn," title="我是标题">我是链接名</a><br><a href="/sonfilename/"><i class="icon-refresh"></i> 点我刷新</a></p>
<p>另一种超链接写法：[链接名][链接代号]<br><a href="http://addapp.cn" title="聚牛团队">here</a><br>然后在别的地方定义 3 这个详细链接信息，</p>
<p>直接展示链接的写法：<a href="http://addapp.cn">http://addapp.cn</a></p>
<p>键盘键<br><kbd>Ctrl+[</kbd> and <kbd>Ctrl+]</kbd></p>
<p>code格式：反引号<br>Use the <code>printf()</code> function.</p>
<p><code>There is a literal backtick (`) here.针对在代码区段内插入反引号的情况</code></p>
<p>强调：<br><em>斜体强调</em><br><strong>粗体强调</strong></p>
<p>图片<br><img src="http://addapp.cn/images/zhihu.png" alt="Alt text" title="Optional title"></p>
<p>使用 icon 图标文字<br><i class="icon-cog"></i></p>
<p>段落：以一个空行开始，以一个空行结束，中间的就是一个段落。</p>
<p>表格：</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td>$1600</td>
</tr>
<tr>
<td>Phone</td>
<td>$12</td>
</tr>
<tr>
<td>Pipe</td>
<td>$1</td>
</tr>
</tbody>
</table>
<p>无序列表：使用 - 加一个空格（）</p>
<ul>
<li>无需列表1</li>
<li>无序列表2</li>
<li>无序列表3</li>
</ul>
<p>有序列表：使用 数字 加一个英文句点</p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<p>换行缩进形成代码区块</p>
<pre><code>这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。    
</code></pre><p>块引用</p>
<blockquote>
<p>给引用的文本开始位置都加一个 ‘&gt;’，<br>便可组成一个块引用。在块引用中，可以结合<br>其他markdown元素一块使用，比如列表。<br><strong>强调</strong><br>也可以只在第一行加大于号，其他位置不加。</p>
<ul>
<li>块引用里使用列表，需要和上面的内容隔开一个空行</li>
<li>记得加空格哦。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo使用总结（2）]]></title>
      <url>/2017/01/10/Hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93(2)/</url>
      <content type="html"><![CDATA[<h3 id="修改博客背景"><a href="#修改博客背景" class="headerlink" title="修改博客背景"></a>修改博客背景</h3><p>我这里使用的是next主题:</p>
<p>  打开<code>source/css/_schemes/Pices/index.styl</code></p>
<p>(Pices你当前的theme),在最上面加上如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: <span class="number">#364F6B</span>; &#125;</div></pre></td></tr></table></figure>
<p>如果想用图片就替换颜色值就可以（图片放到主题source下的images下就可以，也可以用网络图片）</p>
<a id="more"></a>
<h3 id="修改底部样式"><a href="#修改底部样式" class="headerlink" title="修改底部样式"></a>修改底部样式</h3><p>修改字体颜色和超链接颜色：</p>
<p>  打开<code>/themes/next/source/css/_common/components/footer/footer.styl</code></p>
<p>  把以下代码替换你的.footer{}，或者你部分复制粘贴进去</p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.footer &#123;</div><div class="line">  font-size: 14px;</div><div class="line">  color: $grey-light;</div><div class="line">  img &#123; border: none; &#125;;</div><div class="line"></div><div class="line">  a &#123;</div><div class="line">    color: $whitesmoke;</div><div class="line">    text-decoration: $whitesmoke;</div><div class="line">    border-bottom: 1px solid $whitesmoke;</div><div class="line">    word-wrap: break-word;</div><div class="line">    &amp;:hover&#123;</div><div class="line">           color: $orange;</div><div class="line">           border-bottom-color: $orange;</div><div class="line">          &#125;</div><div class="line">  &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<p>给底部作者地方添加超链接：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span class="author" itemprop="copyrightHolder"&gt;</div><div class="line">   &lt;a class="theme-link" href="https://github.com/addappcn" rel="externalnofollow"&gt;&#123;&#123; config.author &#125;&#125;&lt;/a&gt;</div><div class="line"> &lt;/span&gt;`</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
            <category> next </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016总结-2017计划]]></title>
      <url>/2017/01/05/2016%E6%80%BB%E7%BB%93-2017%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<h2 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h2><p>  2015.5月来到成都，在一家外包公司工作，刚开始在公司内部做项目，后面要出差做项目，然后出差回来刚好合同也到期了，就没有续签，决定离职再也不找外部公司。</p>
  <a id="more"></a>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><p>  16年6月进入了一家做自己产品的公司(UTo360.com，做城际专车，顺风车)，感觉还不错，签了三年合同。<br>  之后一直负责专车和顺风车的司机端开发，根据自己做项目的情况总结如下：</p>
<pre><code>1. 开发完一个功能模块，一定要严格自测。
2. 开发时要认真理解需求，严格按照效果图和需求做。
3. 改bug的时候，注意一定不要引起新的bug。
4. 做好版本分支，方便以后维护。
5. 和同事讨论问题时语气和缓，语调柔和。
</code></pre><h6 id="写5的原因是因为公司的小姑娘说我有点凶，呵呵！"><a href="#写5的原因是因为公司的小姑娘说我有点凶，呵呵！" class="headerlink" title="写5的原因是因为公司的小姑娘说我有点凶，呵呵！"></a>写5的原因是因为公司的小姑娘说我有点凶，呵呵！</h6><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p>  希望在新的一年事事顺心，合家欢乐。</p>
<h6 id="工作计划："><a href="#工作计划：" class="headerlink" title="工作计划："></a>工作计划：</h6><pre><code>1. 学习web前端开发技术。
2. 学习Python，及ruby等等。
3. 继续学习react-native。
</code></pre><h6 id="家事："><a href="#家事：" class="headerlink" title="家事："></a>家事：</h6><pre><code>1. 儿子要上幼儿园了，老婆要上班了。
2. 终于决定考驾照了，拖了好几年了。
3. 准备买房子了。
</code></pre><h2 id="所以2017年要好好奋斗拼搏了，为了家做什么都值得。"><a href="#所以2017年要好好奋斗拼搏了，为了家做什么都值得。" class="headerlink" title="所以2017年要好好奋斗拼搏了，为了家做什么都值得。"></a>所以2017年要好好奋斗拼搏了，为了家做什么都值得。</h2>]]></content>
      
        <categories>
            
            <category> work </category>
            
            <category> home </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> home </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
